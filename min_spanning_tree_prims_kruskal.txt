/* Assignment 24:-Minmum cost spanning tree using prims algorithm Lab:DAA */



#include<iostream.h>
#include<conio.h>
int g[100][100],tree[100],n;
class spanning
{
public:
void get()
{
cout<<"Enter the number of nodes :";
cin>>n;
cout<<"\n Enter the graph \n";
for(int i=1;i<=n;i++)
{
for(int j=1;j<=n;j++)
{
 cin>>g[i][j];
}
}
}
void dis()
{
cout<<"\n The Graph Is :\n";
for(int i=1;i<=n;i++)
{
cout<<"\n";
for(int j=1;j<=n;j++)
{
 cout<<g[i][j]<<" ";
}
}
}
void prims()
{
int total=0,v1,v2;
for(int l=1;l<=n;l++)
{
 tree[l]=0;
}
tree[1]=1;
cout<<"\n V1 V2 min_dist : ";
for(int k=2;k<=n;k++)
{
int min_dist=30000;
for(int i=1;i<=n;i++)
{
for(int j=1;j<=n;j++)
{
 if(g[i][j] && ((tree[i] && !tree[j])||(!tree[i]&&tree[j])))
 {
56
if(g[i][j]<min_dist)
{
min_dist=g[i][j];
v1=i;
v2=j;
}
 }
}
}
cout<<"\n"<<v1<<" "<<v2<<" "<<min_dist;
tree[v1]=1;
tree[v2]=1;
total=total+min_dist;
 }
 cout<<"\n Cost of spanning tree is : "<<total;
}
};
void main()
{
spanning s;
clrscr();
cout<<"\n\t. Program For Minimum cost spanning tree Usin Prims Algorithm .\t\n\n";
s.get();
s.dis();
s.prims();
getch();
}



/* OUTPUT :-
Enter the number of nodes :6
Enter the graph
0 3 0 0 2 0
3 0 2 4 0 0
0 2 0 0 5 2
0 4 0 0 1 0
2 0 5 1 0 6
0 0 2 0 6 0
The Graph Is :
0 3 0 0 2 0
3 0 2 4 0 0
0 2 0 0 5 2
0 4 0 0 1 0
2 0 5 1 0 6
0 0 2 0 6 0
V1 V2 min_dist :
1 5 2
4 5 1
1 2 3
2 3 2
57
3 6 2
Cost of spanning tree is : 10






/* Assignment 25 :- Program for demonstrate Kruskal Algorithm. Lab:DAA */


#include<iostream.h>
#include<conio.h>
#define INFINITY 999
typedef struct Graph
{
int v1;
int v2;
int cost;
}GR;
GR G[20];
int tot_edges,tot_nodes;
void create();
void spanning_tree();
int Minimum(int);
void main()
{
clrscr();
cout<<"\n\t Graph Creation by adjacency matrix ";
create();
spanning_tree();
getch();
}
void create()
{
int k;
cout<<"\n Enter Total number of nodes: ";
cin>>tot_nodes;
cout<<"\n Enter Total number of edges: ";
cin>>tot_edges;
for(k=1;k<=tot_edges;k++)
{
cout<<"\n Enter Edge in (V1 V2)form ";
cin>>G[k].v1>>G[k].v2;
cout<<"\n Enter Corresponding Cost ";
cin>>G[k].cost;
}
}
void spanning_tree()
{
int count,k,v1,v2,i,j,tree[10][10],pos,parent[10];
int sum;
int Find(int v2,int parent[]);
void Union(int i,int j,int parent[]);
count=0;
k=1;
sum=0;
for(i=1;i<=tot_nodes;i++)
parent[i]=i;
while(count!=tot_nodes-1)
{
59
pos=Minimum(tot_edges);//finding the minimum cost edge
if(pos==-1)//Perhaps no node in the graph
break;
v1=G[pos].v1;
v2=G[pos].v2;
i=Find(v1,parent);
j=Find(v2,parent);
if(i!=j)
{
tree[k][1]=v1;//storing the minimum edge in array tree[]
tree[k][2]=v2;
k++;
count++;
sum+=G[pos].cost;//accumulating the total cost of MST
Union(i,j,parent);
}
G[pos].cost=INFINITY;
}
if(count==tot_nodes-1)
{
cout<<"\n Spanning tree is...";
cout<<"\n--------------------------\n";
for(i=1;i<=tot_nodes-1;i++)
{
cout<<tree[i][1];
cout<<" - ";
cout<<tree[i][2];
cout<<"]";
}
cout<<"\n--------------------------";
cout<<"\nCost of Spanning Tree is = "<<sum;
}
else
{
cout<<"There is no Spanning Tree";
}
}
int Minimum(int n)
{
int i,small,pos;
small=INFINITY;
pos=-1;
for(i=1;i<=n;i++)
{
if(G[i].cost<small)
{
small=G[i].cost;
pos=i;
}
}
return pos;
60
}
int Find(int v2,int parent[])
{
while(parent[v2]!=v2)
{
v2=parent[v2];
}
return v2;
}
void Union(int i,int j,int parent[])
{
if(i<j)
parent[j]=i;
else
parent[i]=j;
}


/* Output :-
Enter Edge in (V1 V2)form 1 4
Enter Corresponding Cost 4
Enter Edge in (V1 V2)form 1 3
Enter Corresponding Cost 2
Enter Edge in (V1 V2)form 2 4
Enter Corresponding Cost 3
Enter Edge in (V1 V2)form 2 3 
Enter Corresponding Cost 1 
Enter Edge in (V1 V2)form 3 4 
Enter Corresponding Cost 4 
Spanning tree is... 
-------------------------- 
2 - 3]1 - 3]2 - 4] 
-------------------------- 
 Cost of Spanning Tree is = 6